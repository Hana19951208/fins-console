<template>
  <div>
    <el-dialog
      :visible.sync="show"
      title="业务字典绑定值"
      center
      width="50%"
      @closed="closed"
      :close-on-click-modal="false"
    >
      <el-form ref="form" :model="form" label-width="120px">
        <el-row :gutter="24" class="br-a">
          <el-col :span="10" class="dict-item dict-header">名称</el-col>
          <el-col :span="6" class="dict-item dict-header">编码</el-col>
          <el-col :span="8" class="dict-item br-none dict-header">操作</el-col>
          <div v-for="(item, index) in tableData" :key="index">
            <el-col
              :span="10"
              :class="[
                index === tableData.length - 1
                  ? 'dict-item bt-none'
                  : 'dict-item',
              ]"
            >
              <div
                style="line-height: 40px !important"
                @click="canEditHandle(item)"
                class="text-truncate"
              >
                <el-input
                  v-if="item.canEdit"
                  v-model="item.name"
                  maxlength="200"
                />
                <span v-else :title="item.name">{{ item.name }}</span>
              </div>
            </el-col>
            <el-col
              :span="6"
              :class="[
                index === tableData.length - 1
                  ? 'dict-item bt-none'
                  : 'dict-item',
              ]"
            >
              <div
                style="line-height: 40px !important"
                @click="canEditHandle(item)"
                class="text-truncate"
              >
                <el-input
                  v-show="item.canEdit"
                  v-model="item.code"
                  maxlength="200"
                />
                <span v-show="!item.canEdit" :title="item.code">{{
                  item.code
                }}</span>
              </div>
            </el-col>
            <el-col
              :span="8"
              :class="[
                index === tableData.length - 1
                  ? 'dict-item bt-none br-none'
                  : 'dict-item br-none',
              ]"
            >
              <el-button size="mini" @click="confirmHandle(item)"
                >保存</el-button
              >
              <el-button size="mini" @click="delHandle(index)">删除</el-button>
            </el-col>
          </div>
        </el-row>
        <el-row :gutter="24">
          <el-col :span="24">
            <div
              class="el-table-add-row"
              style="width: 100%"
              @click="addDictType()"
            >
              <span>+ 新增字典项</span>
            </div>
          </el-col>
        </el-row>
      </el-form>
      <span slot="footer" class="dialog-footer">
        <el-button @click="saveDictEntry" type="primary">保存</el-button>
        <el-button @click="dialogShowChg">取 消</el-button>
      </span>
    </el-dialog>
  </div>
</template>
<script>
export default {
  name: "DictItem",
  components: {},
  props: {
    value: {
      default: false,
      type: Boolean,
    },
    id: {
      default: null,
      type: String,
    },
  },
  data() {
    return {
      show: false,
      form: {
        id: null,
        module: null,
        name: null,
        code: null,
        entryCodeType: null,
        memo: null,
      },
      tableData: [],
      rules: {
        name: [{ required: true, message: "请输入字典名称", trigger: "blur" }],
        code: [{ required: true, message: "请输入字典编码", trigger: "blur" }],
      },
    };
  },
  watch: {
    value(value) {
      this.show = value;
      if (this.id && this.show) {
        this.$nextTick(() => {
          this.initData(this.id);
        });
      }
    },
  },
  methods: {
    clean() {
      this.$refs.addForm.resetFields();
    },
    dialogShowChg() {
      this.$emit("show");
    },
    initData(dictTypeId) {
      this.$api.dict.getDictEntryByTypeId({ dictTypeId }).then((res) => {
        this.tableData = res;
        this.tableData.forEach((item, index) => {
          // 增加属性，用于判断是否可读写
          this.$set(this.tableData[index], "canEdit", false);
        });
      });
    },
    canEditHandle(item) {
      item.canEdit = true;
    },
    addDictType() {
      const data = {
        name: "",
        code: "",
        canEdit: true,
      };
      this.tableData.push(data);
    },
    confirmHandle(item) {
      if (!item.name) {
        this.$message({ message: "字典项名称不能为空", type: "warning" });
        return false;
      }
      if (!item.code) {
        this.$message({ message: "字典项编码不能为空", type: "warning" });
        return false;
      }
      item.canEdit = false;
      return true;
    },
    delHandle(index) {
      this.tableData.splice(index, 1);
    },
    saveDictEntry() {
      let required = true;
      this.tableData.forEach((item) => {
        if (!this.confirmHandle(item)) {
          required = false;
          return;
        }
      });
      if (required) {
        this.$api.dict
          .saveDictEntry({
            typeId: this.id,
            dictEntry: JSON.stringify(this.tableData),
          })
          .then(() => {
            this.$message({ message: "字典项保存成功", type: "success" });
            this.dialogShowChg();
          });
      }
    },
    closed() {
      this.dialogShowChg();
    },
  },
};
</script>

<style lang="scss" scoped>
.dict-header {
  background-color: #f8f8f8;
}
.br-a {
  border: 1px #e5e5e5 solid;
}
.br-none {
  border-right: none !important;
}
.bt-none {
  border-bottom: none !important;
}
.dict-item {
  height: 40px;
  line-height: 40px;
  border-right: 1px #e5e5e5 solid;
  border-bottom: 1px #e5e5e5 solid;
}
.el-table-add-row {
  margin-top: 10px;
  width: 100%;
  height: 34px;
  border: 1px dashed #c1c1cd;
  border-radius: 3px;
  cursor: pointer;
  justify-content: center;
  display: flex;
  line-height: 34px;
}
</style>
