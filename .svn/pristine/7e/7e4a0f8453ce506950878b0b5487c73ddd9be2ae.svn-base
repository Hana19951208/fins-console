<template>
  <div style="height: 100%">
    <div class="layui-side">
      <el-tree
        :data="menuTreeDs"
        :props="defaultProps"
        :load="loadNode"
        :default-expanded-keys="keyTree"
        :expand-on-click-node="false"
        :highlight-current="true"
        node-key="id"
        lazy
        @node-click="treeSelectHandle"
      />
    </div>
    <div class="layui-body">
      <i-search-el-table
        ref="table"
        :query-form="queryForm"
        :columns="columns"
        :data="data"
        :loading="loading"
        :index="true"
        advanceQuery
        @pagination="initDataTable"
      >
        <template slot="simple-form">
          <el-form-item @submit.native.prevent>
            <el-input
              v-model.trim="queryForm.title"
              :maxlength="50"
              size="small"
              placeholder="请输入标题"
              clearable
            >
              <el-button
                slot="append"
                icon="el-icon-search"
                @click="$refs.table.handleFilter()"
              />
            </el-input>
          </el-form-item>
        </template>
        <template slot="search-form">
          <el-form-item label="标题" prop="title">
            <el-input
              v-model="queryForm.title"
              placeholder="请输入标题"
              maxlength="50"
              clearable
            />
          </el-form-item>
          <el-form-item label="是否有效" prop="code">
            <el-select
              v-model="queryForm.isValid"
              clearable
              class="filter-item"
            >
              <el-option
                v-for="item in isValidDs"
                :key="item.code"
                :label="item.name"
                :value="item.code"
              />
            </el-select>
          </el-form-item>
        </template>
        <template slot="resolve" slot-scope="{ scope }">
          {{ scope.row.resolve | isNUllToZero }}
        </template>
        <template slot="noResolve" slot-scope="{ scope }">
          {{ scope.row.noResolve | isNUllToZero }}
        </template>
        <template slot="isValid" slot-scope="{ scope }">
          {{ scope.row.isValid | dictFormat(isValidDs) }}
        </template>
        <template slot="title" slot-scope="{ scope }">
          <el-link
            :underline="false"
            type="primary"
            class="blue--text text--darken-2"
            @click="viewHandler(scope.$index)"
          >
            {{ scope.row.title }}
          </el-link>
        </template>

        <template slot="action-button" v-if="questType">
          <el-button v-has="'btn-add'" @click="addHandle">新增</el-button>
          <el-button-group>
            <el-button v-has="'btn-edit'" @click="editHandle">编辑</el-button>
            <el-button v-has="'btn-del'" @click="delHandle">删除</el-button>
          </el-button-group>
        </template>
      </i-search-el-table>
    </div>
    <add
      ref="addDialog"
      v-model="addDialog.show"
      :selection="selection"
      :is-view="isView"
      @show="addDialog.show = false"
      @refreshTable="initDataTable"
    />
  </div>
</template>

<script>
import ISearchElTable from "@/components/ISearchElTable";
import { getDictEntrysByCode } from "@/utils";
import * as utils from "@/utils";
import add from "./add";
export default {
  name: "Help",
  components: { ISearchElTable, add },
  filters: {
    isNUllToZero(value) {
      if (value) {
        return value;
      } else {
        return "0";
      }
    },
  },
  data() {
    return {
      columns: [
        { label: "标题", key: "title", align: "center" },
        { label: "解决问题次数", key: "resolve", align: "center" },
        { label: "未解决次数", key: "noResolve", align: "center" },
        { label: "是否有效", key: "isValid", align: "center" },
        { label: "操作时间", key: "updateTime", align: "center" },
        // { label: "操作", key: "operation", align: "center" }
      ],
      queryForm: {
        pageNum: 1,
        pageSize: 10,
        title: null,
        isValid: null,
        channel: "",
        questType: "",
      },
      data: {},
      loading: false,
      defaultProps: {
        children: "children",
        label: "name",
        isLeaf: function (val) {
          return val.isoperate === 2;
        },
      },
      isValidDs: [
        {
          code: 1,
          name: "有效",
        },
        {
          code: 0,
          name: "无效",
        },
      ],
      selection: {},
      addDialog: {
        show: false,
      },
      isView: false,
      menuTreeDs: [],
      node: {},
      keyTree: [],
      selectionThree: {},
      channel: "",
      questType: "",
    };
  },
  computed: {
    typeDs() {
      return getDictEntrysByCode("CORE.RESOURCE.TYPE");
    },
    productTypeDs() {
      return getDictEntrysByCode("PRODUCT_TYPE");
    },
  },
  mounted() {
    this.initDataTable();
  },
  methods: {
    initDataTable() {
      this.loading = true;
      this.queryForm.channel = this.channel;
      this.queryForm.questType = this.questType;
      this.$api.help.selectCommonProblemInfoList(this.queryForm).then((res) => {
        this.data = res;
        this.loading = false;
      });
    },
    treeSelectHandle(data, node) {
      this.channel = node.parent.data.channel || data.channel;
      this.questType = data.channel ? "" : data.code;
      this.initDataTable();
    },
    loadNode(node, resolve) {
      this.$api.help.getCommonProblemTree({ id: node.data.id }).then((res) => {
        const data = res.body;
        data.map((item, index) => {
          if (data[index] && data[index].isoperate < 2) {
            this.keyTree.push(data[index].id);
          }
        });
        resolve(data);
      });
    },
    addHandle() {
      this.isView = false;
      this.selection = {};
      this.addDialog.show = true;
      // 重置子组件form表单
      console.info();
    },
    editHandle() {
      this.isView = false;
      if (this.$refs.table.isCheckedOne()) {
        // console.info(this.$refs.table.selection)
        this.selection = this.$refs.table.selection[0];
        this.addDialog.show = true;
      }
    },
    delHandle() {
      if (this.$refs.table.isChecked()) {
        const selection = this.$refs.table.selection;
        const ids = [];
        selection.forEach((item) => {
          ids.push(item.id);
        });
        // console.log(selection)
        this.$refs.table
          .delConfirm({ message: "确定要删除选择的内容吗?" })
          .then(() => {
            this.$api.help.delHelp({ ids: ids.join(",") }).then(() => {
              this.$message({
                message: utils.GLOBAL.OPERATE_SUCCESS,
                type: "success",
              });
              this.queryForm.pageNum = 1;
              this.initDataTable();
            });
          });
      }
    },
    viewHandler(index) {
      this.isView = true;
      this.selection = this.$refs.table.tableData[index];
      this.addDialog.show = true;
    },
  },
};
</script>

<style scoped>
</style>
