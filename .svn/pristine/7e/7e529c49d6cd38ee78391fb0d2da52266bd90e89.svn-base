<template>
  <el-dialog
    :close-on-click-modal="false"
    :visible.sync="show"
    title="关联按钮"
    width="80%"
    @closed="closed"
  >
    <div
      style="
        max-height: 300px;
        display: inline-block;
        overflow-y: auto;
        overflow-x: hidden;
      "
    >
      <div class="mb-3">
        <span style="position: relative; margin-left: 0px"
          >请点击选择按钮
        </span>
        <span
          style="
            width: 20%;
            text-align: right;
            position: relative;
            margin-left: 75%;
          "
        >
          <el-checkbox
            :indeterminate="isIndeterminate"
            v-model="checkAll"
            @change="handleCheckAllChange"
          >
            <span>全选</span>
          </el-checkbox>
        </span>
      </div>
      <el-checkbox-group
        v-model="checked"
        style="height: 60%; text-align: left"
        @change="handleCheckedCitiesChange"
      >
        <el-checkbox
          v-for="item in data"
          :key="item.id"
          :label="item"
          :checked="item.type == 2 ? true : false"
          style="width: 18.5%; margin: 2px; height: 60px"
          border
        >
          <div>{{ item.name }}</div>
          <hr />
          <div>{{ item.action }}</div>
        </el-checkbox>
      </el-checkbox-group>
    </div>
    <div class="text-center pt-2" style="border-top: 1px solid #eee">
      <el-button type="primary" @click="confirm">
        <span class="mx-2">确定</span>
      </el-button>
    </div>
  </el-dialog>
</template>

<script>
import { GLOBAL, mappingData } from "@/utils";
export default {
  props: {
    value: {
      default: false,
      type: Boolean,
    },
    selection: {
      default: () => {},
      type: Object,
    },
    data: {
      type: Array,
      default: () => [],
    },
  },
  data() {
    return {
      checkAll: false,
      checked: [],
      items: [],
      isIndeterminate: true,
      show: false,
      form: {
        resourceId: null,
        buttonIds: "",
        productCode: null,
      },
    };
  },
  watch: {
    value(value) {
      this.show = value;
      if (this.selection) {
        this.$nextTick(() => {
          this.form = this.$options.data().form;
          this.form = Object.assign(
            this.form,
            mappingData(this.selection, this.form)
          );
        });
      }
    },
  },
  methods: {
    handleCheckAllChange(val) {
      this.checked = val ? this.data : [];
      this.isIndeterminate = false;
    },
    handleCheckedCitiesChange(value) {
      this.items = this.data;
      const checkedCount = value.length;
      this.checkAll = checkedCount === this.items.length;
      this.isIndeterminate =
        checkedCount > 0 && checkedCount < this.items.length;
    },
    closed() {
      this.checked = [];
      this.$emit("show");
    },
    confirm() {
      this.form.buttonIds = "";
      for (var i = 0; i < this.checked.length; i++) {
        this.form.buttonIds = this.form.buttonIds + "," + this.checked[i].id;
      }
      this.form.buttonIds = this.form.buttonIds.substring(1);
      this.form.resourceId = this.selection.id;
      this.form.productCode = this.selection.productCode;
      this.$api.resource.updateResourceButtons(this.form).then(() => {
        this.$message({ message: GLOBAL.OPERATE_SUCCESS, type: "success" });
        this.closed();
      });
    },
  },
};
</script>

<style lang="scss" scoped></style>
