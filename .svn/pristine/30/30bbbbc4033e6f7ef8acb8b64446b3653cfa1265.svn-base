<template>
  <!-- <div style="width:1090px;height:650px;overflow-y:scroll;"> -->
  <el-dialog
    :close-on-click-modal="false"
    :visible.sync="show"
    title="按钮授权"
    center
    width="80%"
    height="80%"
    class="dialog-title el-dialog__header"
    @closed="closed"
  >
    <div style="width: 100%">
      <span style="position: relative; margin-left: 0px">请点击选择按钮 </span>
      <span
        style="
          width: 20%;
          text-align: right;
          position: relative;
          margin-left: 75%;
        "
      >
        <el-checkbox
          :indeterminate="isIndeterminate"
          v-model="checkAll"
          style="position: relative; left: 2%; text-align: left"
          @change="handleCheckAllChange"
          >全选</el-checkbox
        >
      </span>
    </div>
    <el-checkbox-group
      v-model="checked"
      style="height: 60%; text-align: left"
      @change="handleCheckedCitiesChange"
    >
      <el-checkbox
        v-for="(item, index) in source"
        :label="item"
        :key="item.id"
        :checked="item.type == 2"
        style="width: 18.5%; margin: 2px; height: 60px"
        border
      >
        <div>{{ item.name }}</div>
        <hr />
        <div>{{ item.action }}</div>
      </el-checkbox>
    </el-checkbox-group>
    <div style="text-align: center" class="mt-3">
      <el-button type="primary" @click="confirm">确定</el-button>
    </div>
  </el-dialog>
  <!-- </div> -->
</template>

<script>
import { GLOBAL } from "@/utils";
export default {
  props: {
    value: {
      default: false,
      type: Boolean,
    },
    parames: {
      default: () => {},
      type: Object,
    },
    source: {
      default: () => [],
      type: Array,
    },
    channel: {
      default: null,
      type: String,
    },
  },
  data() {
    return {
      checkAll: false,
      checked: [],
      items: [],
      isIndeterminate: true,
      show: false,
      form: {
        resourceId: null,
        buttonIds: "",
        productCode: null,
      },
    };
  },
  watch: {
    value(value) {
      this.show = value;
    },
    source(value) {
      this.initData(value);
    },
  },
  methods: {
    initData(deta) {
      let index = false;
      if (this.source.length > 0) {
        this.source.filter((item) => {
          if (item.type == 1) {
            index = true;
          }
        });
        if (index) {
          this.checkAll = false;
          this.isIndeterminate = true;
        } else {
          this.checkAll = true;
          this.isIndeterminate = false;
        }
      } else {
        this.checkAll = false;
        this.isIndeterminate = true;
      }
    },
    handleCheckAllChange(val) {
      this.checked = val ? this.source : [];
      this.isIndeterminate = false;
    },
    handleCheckedCitiesChange(value) {
      this.items = this.source;
      const checkedCount = value.length;
      this.checkAll = checkedCount === this.items.length;
      this.isIndeterminate =
        checkedCount > 0 && checkedCount < this.items.length;
    },
    closed() {
      this.checked = [];
      this.$emit("show");
    },
    confirm() {
      // if (this.checked.length < 1) {
      //   return
      // }
      this.form.buttonIds = "";
      for (var i = 0; i < this.checked.length; i++) {
        this.form.buttonIds = this.form.buttonIds + "," + this.checked[i].id;
      }
      this.form.buttonIds = this.form.buttonIds.substring(1);
      this.form.resourceId = this.parames.resourceId;
      this.form.roleId = this.parames.roleId;
      this.$api.role.updateRoleResourceButtons(this.form).then(() => {
        this.$message({ message: GLOBAL.OPERATE_SUCCESS, type: "success" });
        this.closed();
      });
    },
  },
};
</script>

<style lang="scss" scoped>
</style>
