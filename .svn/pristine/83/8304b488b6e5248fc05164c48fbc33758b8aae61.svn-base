<template>
  <div class="add-app">
    <el-card class="body-2" shadow="never">
      <div slot="header">
        <a @click="goBack" class="black--text">
          <i class="el-icon-arrow-left" />
          <span>{{ modTitle }}</span>
        </a>
      </div>
      <div>
        <el-form ref="addForm" :model="form" :rules="rules" label-width="120px" :status-icon="false">
          <el-row>
            <el-col :span="24">
              <el-form-item prop="appsName" label="应用名称：" label-width="120px">
                <el-input style="width: 350px" v-model.trim="form.appsName" placeholder="请输入应用名称" maxlength="50" clearable />
              </el-form-item>
            </el-col>
            <el-col :span="24">
              <el-form-item prop="appsRemark" label="应用描述：" label-width="120px">
                <el-input
                  v-model.trim="form.appsRemark"
                  :rows="4"
                  maxlength="200"
                  show-word-limit
                  placeholder="请输入应用描述"
                  type="textarea"
                />
              </el-form-item>
            </el-col>
            <el-col :span="24">
              <el-form-item prop="appsLoginUrl" label="登录回调地址：" label-width="120px">
                <el-input v-model.trim="form.appsLoginUrl" placeholder="请输入登录回调地址" maxlength="50" clearable />
              </el-form-item>
            </el-col>
            <el-col :span="24">
              <el-form-item prop="appsLogoutUrl" label="登出回调地址：" label-width="120px">
                <el-input v-model.trim="form.appsLogoutUrl" placeholder="请输入登出回调地址" maxlength="50" clearable />
              </el-form-item>
            </el-col>
            <el-col :span="24">
              <el-form-item prop="appsAppid" label="APPID：" label-width="120px">
                <el-input style="width: 350px" v-model.trim="appsAppid" placeholder="请输入" maxlength="36" clearable readonly>
                  <i slot="suffix" class="el-input__icon el-icon-view x-icon" @click="encryptToggle(form.appsAppid)"></i>
                </el-input>
                <el-button type="primary" class="ml-3" :loading="uuidLoading" @click="getUUID(true)">重新生成</el-button>
              </el-form-item>
            </el-col>
            <el-col :span="24">
              <el-form-item prop="fileList">
                <span slot="label"> <i style="color: #f56c6c; margin-right: 4px">*</i>应用图标： </span>
                <el-upload
                  list-type="picture-card"
                  :action="imageUploadAction"
                  :data="uploadData"
                  :file-list="fileList"
                  :before-upload="beforeFileUpload"
                  :on-remove="fileUploadRemove"
                  :on-success="fileUploadSuccess"
                  :on-preview="filePreview"
                  :limit="1"
                  name="attachMentFile"
                >
                  <i slot="default" class="el-icon-plus"></i>
                  <div slot="tip" class="el-upload__tip m2-2 grey--text">仅支持上传一张jpg、jpeg、png格式的图标，文件大小限制1MB</div>
                </el-upload>
              </el-form-item>
            </el-col>
            <el-col :span="24">
              <el-divider></el-divider>
            </el-col>
            <el-col :span="24">
              <el-alert :title="alertInfo" type="info" show-icon> </el-alert>
            </el-col>
            <el-col :span="24" class="mt-3">
              <el-form-item prop="appsClientTypeList" label-width="120px">
                <span slot="label"> <i style="color: #f56c6c; margin-right: 4px">*</i>客户端配置： </span>
                <el-checkbox-group v-model="appsClientTypeList">
                  <el-checkbox v-for="item in clientDs" :key="item.code" :label="item.code">
                    {{ item.name }}
                  </el-checkbox>
                </el-checkbox-group>
              </el-form-item>
            </el-col>
          </el-row>
        </el-form>
        <div class="text-center mt-4">
          <el-button :loading="loading" @click="submitForm('addForm')" type="primary" id="submit-btn"> 提交 </el-button>
          <el-button id="back-btn" @click="goBack">
            <span class="mx-2">返回</span>
          </el-button>
        </div>
      </div>
    </el-card>
    <el-dialog width="600px" class="text-center" :visible.sync="dialog.preview">
      <img width="100%" :src="dialog.imgUrl" />
    </el-dialog>
  </div>
</template>
<script>
import { getDictEntrysByCode, mappingData, GLOBAL } from '@/utils'
import { getToken } from '@/utils/auth'
export default {
  data() {
    var validateFile = (rule, value, callback) => {
      if (this.fileList && this.fileList.length == 0) {
        callback(new Error('请上传应用图标'))
      } else {
        callback()
      }
    }
    var validateClient = (rule, value, callback) => {
      if (this.appsClientTypeList && this.appsClientTypeList.length == 0) {
        callback(new Error('请选择客户端'))
      } else {
        callback()
      }
    }
    return {
      show: false,
      loading: false,
      uuidLoading: false,
      encrypt: false,
      alertInfo: '该应用支持的客户端列表，如统计报表应用仅展示在PC客户端，则只需要选择PC客户端即可。',
      form: {
        appsName: null,
        appsRemark: null,
        appsLoginUrl: null,
        appsLogoutUrl: null,
        appsAppid: null,
        appsIconUrl: null,
        appsIconFname: null,
        appsClientType: null,
      },
      appsAppid: '',
      fileList: [],
      appsClientTypeList: [],
      dialog: {
        preview: false,
        imgUrl: null,
      },
      rules: {
        appsName: [{ required: true, message: '请输入应用名称', trigger: 'blur' }],
        appsLoginUrl: [{ required: true, message: '请输入登录回调地址', trigger: 'blur' }],
        appsLogoutUrl: [{ required: true, message: '请输入登出回调地址', trigger: 'blur' }],
        appsAppid: [{ required: true, message: '请生成APPID', trigger: 'blur' }],
        fileList: [{ validator: validateFile, trigger: 'change' }],
        appsClientTypeList: [{ validator: validateClient, trigger: 'change' }],
      },
    }
  },

  computed: {
    modTitle() {
      return this.$route.query.id ? '编辑应用' : '新增应用'
    },
    clientDs() {
      return getDictEntrysByCode('SYS.COM.CLIENT.TYPE')
    },
    uploadData() {
      return { token: getToken() }
    },
    imageUploadAction() {
      return process.env.PREFIX_URL + '/common/uploadFile'
    },
  },
  mounted() {
    const appsId = this.$route.query.id
    if (appsId) {
      this.$api.application.findById({ appsId }).then((res) => {
        Object.assign(this.form, mappingData(res, this.form))
        this.form.appsId = appsId
        this.fileList = [
          {
            name: res.appsIconFname,
            url: res.appsIconUrl,
          },
        ]
        this.appsClientTypeList = res.appsClientType.split(',')
        this.encryptToggle(res.appsAppid)
      })
    } else {
      this.encrypt = !this.encrypt
      this.getUUID()
    }
  },
  methods: {
    getUUID(isClick) {
      if (isClick) {
        this.uuidLoading = true
      }
      this.$api.application
        .getUUID()
        .then((res) => {
          if (isClick) {
            this.uuidLoading = false
          }
          this.form.appsAppid = res
          this.appsAppidEvt(res)
        })
        .catch(() => {
          if (isClick) {
            this.uuidLoading = false
          }
        })
    },
    insertApp() {
      this.$api.application.addApp(this.form).then(() => {
        this.$message({ message: GLOBAL.OPERATE_SUCCESS, type: 'success' })
        this.goBack()
      })
    },
    updateApp() {
      this.$api.application.updateApp(this.form).then(() => {
        this.$message({ message: GLOBAL.OPERATE_SUCCESS, type: 'success' })
        this.goBack()
      })
    },
    submitForm(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          this.form.appsClientType = this.appsClientTypeList.join(',')
          this.form.appsIconUrl = this.fileList[0].url
          this.form.appsIconFname = this.fileList[0].name
          if (this.form.appsId) {
            this.updateApp()
          } else {
            this.insertApp()
          }
        } else {
          return false
        }
      })
    },
    encryptToggle(val) {
      console.log(this.encrypt)
      let appsAppid = val ? val : this.form.appsAppid
      this.encrypt = !this.encrypt
      this.appsAppidEvt(appsAppid)
    },
    appsAppidEvt(val) {
      console.log(this.encrypt)
      let appsAppid = val ? val : this.form.appsAppid
      if (this.encrypt) {
        this.appsAppid = appsAppid.replace(appsAppid.substring(8, 28), '****************')
      } else {
        this.appsAppid = appsAppid
      }
    },
    filePreview(file) {
      this.dialog.imgUrl = file.url
      this.dialog.preview = true
    },
    fileUploadSuccess(data) {
      if (data.errCode == '-1' && data.data) {
        this.fileList.push({
          name: data.data.fileName,
          url: data.data.url,
        })
      } else {
        this.$message.warning('文件上传异常,请重新上传！')
        return false
      }
    },
    fileUploadRemove(file) {
      if (file && file.status === 'success') {
        this.fileList.splice(
          this.fileList.findIndex((item) => item.url === file.url),
          1
        )
      }
    },
    beforeFileUpload(file) {
      const isLt2M = file.size / 1024 / 1024 < 1
      if (!isLt2M) {
        this.$message.error('图标大小不能超过1MB，请重新上传！')
        return false
      }
      const accept = ['jpg', 'jpeg', 'png', 'JPG', 'JPEG', 'PNG']
      let extension = file.name.substring(file.name.lastIndexOf('.') + 1)
      if (accept.indexOf(extension) === -1) {
        this.$message.warning(`上传失败，请检查图标格式`)
        return false
      }
      return true
    },
    goBack() {
      this.$router.go(-1)
    },
  },
}
</script>

<style lang="scss" scoped>
.add-app {
  /deep/.el-divider--horizontal {
    margin: 12px 0;
  }
  /deep/.el-dialog__headerbtn {
    top: 10px;
  }
  .x-icon {
    cursor: pointer;
  }
}
</style>
