<template>
  <div style="height: 100%">
    <div class="layui-side">
      <el-tree
        ref="orgTree"
        :data="orgs"
        :props="defaultProps"
        :filter-node-method="filterNode"
        :expand-on-click-node="false"
        class="mt-3"
        default-expand-all
        node-key="id"
        @node-click="nodeClickHandle"
        @node-contextmenu="contextmenuHandle"
      />
    </div>
    <div class="layui-body overflow-x-hidden">
      <div>
        <el-form
          ref="form"
          :model="form"
          :rules="rules"
          class="info-form py-3"
          label-width="160px"
        >
          <el-row :gutter="24">
            <el-col :span="12">
              <el-form-item prop="name" label="机构名称：">
                <el-input
                  v-model="form.name"
                  :disabled="isEdit"
                  maxlength="50"
                  placeholder="请输入机构名称"
                />
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item prop="orgCode" label="机构代码：">
                <el-input
                  v-model="form.orgCode"
                  :disabled="editOrgCode"
                  maxlength="50"
                  placeholder="请输入机构代码"
                />
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24"> </el-row>
          <el-row :gutter="24">
            <el-col :span="12">
              <el-form-item prop="theSort" label="排序：">
                <el-input
                  maxlength="4"
                  v-model="form.theSort"
                  :disabled="isEdit"
                  placeholder="请输入排序序号"
                />
              </el-form-item>
            </el-col>
            <el-col :span="12">
              <el-form-item prop="orgPhone" label="客服电话：">
                <el-input
                  v-model="form.orgPhone"
                  :disabled="isEdit"
                  maxlength="20"
                  placeholder="请输入客服电话"
                />
              </el-form-item>
            </el-col>
          </el-row>
          <el-row :gutter="24">
            <el-col :span="24">
              <el-form-item prop="descn" label="描述：">
                <el-input
                  v-model="form.descn"
                  :disabled="isEdit"
                  type="textarea"
                  placeholder="请输入描述"
                  maxlength="200"
                  show-word-limit
                />
              </el-form-item>
            </el-col>
          </el-row>
        </el-form>
      </div>
      <div>
        <div v-show="!isEdit" class="text-center">
          <el-button @click="cancleEdit">
            <span class="px-2">取消</span>
          </el-button>
          <el-button type="primary" @click="submitForm('form')">保存</el-button>
        </div>
      </div>
    </div>
    <el-popover
      ref="popRef"
      v-model="contextmenuShow"
      popper-class="menu-pop"
      placement="top-start"
    >
      <ul>
        <li v-has="'btn-add-child'" v-show="addOrgShow" @click="addOrg">
          <i class="el-icon-circle-plus" />增加子机构
        </li>
        <li v-has="'btn-edit'" @click="editOrg">
          <i class="el-icon-edit" />修改机构
        </li>
        <li v-has="'btn-del'" @click="deleteOrg">
          <i class="el-icon-delete" />删除机构
        </li>
      </ul>
    </el-popover>
    <Add
      ref="addDialog"
      v-model="addDialog.show"
      :node="popNode"
      @show="addDialog.show = false"
      @refreshTreeNode="getOrganizationTree"
    />
  </div>
</template>

<script>
import ISearchElTable from "@/components/ISearchElTable";
import { on, off } from "element-ui/src/utils/dom";
import { mappingData, GLOBAL, getDictEntrysByCode } from "@/utils";
import Add from "./Add";
export default {
  name: "Organization",
  components: { ISearchElTable, Add },
  data() {
    return {
      filterText: "",
      orgs: [],
      searchLength: 50,
      limit: 1,
      editOrgCode: true,
      activeVal: 1,
      inactiveVal: 0,
      form: {
        id: "",
        name: "",
        orgCode: "",
        isCredit: "",
        theSort: "",
        descn: "",
        parentId: "",
        level: "",
        orgSeq: "",
        orgPhone: "",
      },
      rules: {
        isCredit: [
          {
            required: true,
            message: "请选择是否办理信贷业务",
            trigger: "change",
          },
        ],
        name: [
          { required: true, message: "请输入机构名称", trigger: "blur" },
          { max: 50, message: "机构名称不能超过50个字符", trigger: "blur" },
        ],
        orgCode: [
          { required: true, message: "请输入机构代码", trigger: "blur" },
          { max: 20, message: "机构代码不能超过20个字符", trigger: "blur" },
          {
            pattern: /^[1-9]\d*$/,
            message: "请输入数字,且首位不能为0",
            trigger: "blur",
          },
        ],
        theSort: [
          { required: true, message: "请输入排序序号", trigger: "blur" },
          {
            pattern: /^[1-9]\d*$/,
            message: "格式错误，请输入整数",
            trigger: "blur",
          },
        ],
      },
      defaultProps: {
        label: "name",
        children: "childrens",
        isLeaf: function (val) {
          return val.isLeaf;
        },
      },
      contextmenuShow: false,
      popData: {}, // 选中节点数据
      popNode: {}, // 选中节点
      isEdit: true, // 编辑状态
      addOrgShow: true,
      deleteOrgShow: true,
      resourceDialog: {
        show: false,
      },
      addDialog: {
        show: false,
      },
      selectedNode: null,
      isShow: false,
    };
  },
  computed: {
    // 是否办理信贷业务
    isCreditDs() {
      return [
        { name: "是", code: 1 },
        { name: "否", code: 0 },
      ];
    },
  },
  watch: {
    filterText(val) {
      this.$refs.orgTree.filter(val);
    },
    isEdit() {
      return true;
    },
  },
  mounted() {
    this.getOrganizationTree();
  },
  methods: {
    contextmenuHandle(event, data, node) {
      // 鼠标右键事件
      this.isShow = true;
      this.isEditHandle().then(() => {
        event.preventDefault();
        this.contextmenuShow = true;
        this.$refs.popRef.$refs.popper.style.top = event.clientY - 100 + "px";
        this.popData = data;
        this.popNode = node;
        this.addOrgShow = data.level < 5;
        on(document, "click", this.handleDocumentClick);
      });
    },
    handleDocumentClick(event) {
      this.contextmenuShow = false;
    },
    // 验证数据是否保存
    isEditHandle() {
      return new Promise((resolve, reject) => {
        if (!this.isEdit) {
          this.$confirm("你有尚未保存的信息！是否确定退出编辑。", "系统提示", {
            confirmButtonText: "确定",
            cancelButtonText: "关闭",
            type: "warning",
          })
            .then(() => {
              this.isEdit = true;
              resolve();
            })
            .catch(() => {
              reject();
            });
        } else {
          resolve();
        }
      });
    },
    // 新增
    addOrg() {
      this.addDialog.show = true;
      this.contextmenuShow = false;
    },
    // 编辑
    editOrg() {
      Object.assign(this.form, mappingData(this.popData, this.form));
      this.isEdit = false;
      this.contextmenuShow = false;
    },
    // 删除
    deleteOrg() {
      this.$confirm(`确定删除机构【${this.popNode.data.name}】吗?`, {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning",
        title: "系统提示",
      })
        .then(() => {
          this.$api.org
            .deleteOrganization({ id: this.popNode.data.id })
            .then(() => {
              this.contextmenuShow = false;
              this.$message({
                message: GLOBAL.OPERATE_SUCCESS,
                type: "success",
              });
              this.getOrganizationTree();
              this.form = this.$options.data().form;
              if (this.$refs.form) {
                this.$refs.form.resetFields();
              }
            });
        })
        .catch(() => {
          this.contextmenuShow = false;
        });
    },
    // 树节点--前端过滤查询
    filterNode(value, data) {
      if (!value) return true;
      return data.name.indexOf(value) !== -1;
    },
    // 获取机构数据源
    getOrganizationTree() {
      this.$api.organization
        .getOrganizationTree({ isCredit: true })
        .then((res) => {
          this.orgs = JSON.parse(res || "[]");
        });
    },
    // 验证数据是否保存
    cancleEdit() {
      const data = this.selectedNode;
      if (data) {
        this.$confirm("您有尚未保存的信息，确认退出编辑吗?", "提示", {
          confirmButtonText: "确定",
          cancelButtonText: "关闭",
          type: "warning",
        }).then(() => {
          this.isEdit = true;
          const res = mappingData(data, this.form);
          Object.assign(this.form, res);
        });
      }
    },
    nodeClickHandle(data) {
      // 节点单击事件
      this.contextmenuShow = false;
      this.isShow = true;
      this.isEditHandle().then(() => {
        this.selectedNode = data;
        const res = mappingData(data, this.form);
        Object.assign(this.form, res);
      });
    },
    submitForm(formName) {
      if (!this.selectedNode) {
        this.$message({
          message: "请选择左侧节点",
          type: "warning",
        });
        return;
      }
      this.$refs[formName].validate((valid) => {
        if (valid) {
          const data = {
            parentId: this.form.parentId,
            theSort: this.form.theSort,
          };
          this.$api.org.getCountByThesort(data).then((res) => {
            this.$api.org.updateOrganization(this.form).then(() => {
              this.$message({
                message: GLOBAL.OPERATE_SUCCESS,
                type: "success",
              });
              this.isEdit = true;
              this.getOrganizationTree();
            });
          });
        } else {
          return false;
        }
      });
    },
  },
};
</script>

<style lang="scss">
.info-form {
  .el-checkbox-button {
    margin-right: 10px;
  }
  .el-checkbox-button--small .el-checkbox-button__inner {
    margin-bottom: 5px;
    border-radius: 4px;
    border: 1px solid #dcdfe6;
  }
  .el-checkbox-button.is-checked .el-checkbox-button__inner {
    border-color: #409eff;
  }
}
.menu-pop {
  ul {
    padding: 0;
    margin: 0;
    max-height: 400px;
    overflow: auto;
    li {
      list-style: none;
      line-height: 36px;
      padding: 0 20px;
      margin: 0;
      font-size: 14px;
      color: #606266;
      cursor: pointer;
      outline: none;
      i {
        padding-right: 10px;
      }
    }
    li:hover {
      background-color: #ecf5ff;
      color: #66b1ff;
    }
  }
}
.mce-ico {
  width: 8px !important;
}

.layui-side {
  width: 250px;
}
.layui-body {
  left: 270px;
}
</style>
