<template>
  <div>
    <el-dialog
      :close-on-click-modal="false"
      :title="selection.id ? (isView ? '查看' : '编辑') : '新增'"
      :visible.sync="show"
      @closed="closed"
      center
      width="880px"
    >
      <el-form
        :model="form"
        :rules="rules"
        label-width="120px"
        ref="addForm"
        status-icon
      >
        <!-- <el-form-item label="帮助标题" prop="title">
          <el-input :disabled="isView" placeholder="请输入帮助标题" v-model="form.title" />
        </el-form-item> -->
        <!-- <el-form-item label="是否有效" prop="isValid">
          <el-select :disabled="isView" class="filter-item" clearable v-model="form.isValid">
            <el-option
              :key="item.code"
              :label="item.name"
              :value="item.code"
              v-for="item in isValidDs"
            />
          </el-select>
        </el-form-item> -->
        <el-form-item :error="errorMsg" label="内容" prop="contents">
          <Tinymce :disabled="isView" ref="editor" v-model="form.contents" />
        </el-form-item>
      </el-form>
      <span class="dialog-footer" slot="footer" v-if="isView">
        <el-button @click="clean" type="danger">关 闭</el-button>
        <!-- <el-button @click="submitForm('addForm')" type="primary">提交</el-button> -->
      </span>
    </el-dialog>
  </div>
</template>
<script>
import { mappingData } from "@/utils";
import Tinymce from "@/components/Tinymce";
import { getToken } from "@/utils/auth";
export default {
  name: "HelpAdd",
  components: { Tinymce },
  props: {
    value: {
      default: false,
      type: Boolean,
    },
    selection: {
      default: () => {},
      type: Object,
    },
    isView: {
      default: false,
      type: Boolean,
    },
  },
  data() {
    return {
      show: false,
      errorMsg: "",
      form: {
        id: null,
        title: null,
        isValid: null,
        contents: null,
        channel: null,
        productCode: null,
      },
      options: [],
      rules: {
        title: [{ required: true, message: "请输入通知标题", trigger: "blur" }],
        isValid: [
          { required: true, message: "请选择是否有效", trigger: "blur" },
        ],
        contents: [
          { required: true, message: "请输入通知内容", trigger: "blur" },
        ],
      },
      fileList: [],
      isValidDs: [
        {
          code: 1,
          name: "有效",
        },
        {
          code: 0,
          name: "无效",
        },
      ],
    };
  },
  computed: {
    uploadData() {
      return { IFLYTEK_CSRFTOKEN: getToken() };
    },
  },
  watch: {
    value(value) {
      this.show = value;
      this.fileList = [];
      if (this.show) {
        this.$nextTick(() => {
          this.initEdit(this.selection);
          this.hasTinymce();
        });
      }
    },
  },
  methods: {
    hasTinymce() {
      const interval = setInterval(() => {
        if (
          window.tinymce &&
          window.tinymce.activeEditor &&
          window.tinymce.activeEditor.getBody()
        ) {
          window.tinymce.activeEditor.setContent(this.selection.contents);
          if (this.isView) {
            window.tinymce.activeEditor
              .getBody()
              .setAttribute("contenteditable", false);
            clearInterval(interval);
          } else {
            window.tinymce.activeEditor
              .getBody()
              .setAttribute("contenteditable", true);
            clearInterval(interval);
          }
        }
      }, 200);
    },
    clean() {
      // alert(1)
      this.$refs.addForm.resetFields();
      this.$refs.addForm.id = null;
      window.tinymce.activeEditor.setContent("");
      // debugger
      this.dialogShowChg();
    },
    dialogShowChg() {
      this.$emit("show");
    },
    initEdit(data) {
      this.form = this.$options.data().form;
      Object.assign(this.form, mappingData(data, this.form));
      console.log(this.form);
    },
    insertDictType() {
      this.form.channel = this.$parent.queryForm.channel;
      this.$api.help.addHelp(this.form).then(() => {
        this.$message({ message: "新增成功", type: "success" });
        this.dialogShowChg();
        this.$emit("refreshTable");
      });
    },
    updateDictType() {
      this.$api.help.updataHelp(this.form).then(() => {
        this.$message({ message: "编辑成功", type: "success" });
        this.dialogShowChg();
        this.$emit("refreshTable");
      });
    },
    submitForm(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          if (this.form.id) {
            // 编辑
            this.updateDictType();
          } else {
            // 新增
            this.insertDictType();
          }
        } else {
          return false;
        }
      });
    },
    closed() {
      this.dialogShowChg();
      this.$refs.addForm.resetFields();
      this.$refs.addForm.id = null;
      window.tinymce.activeEditor.setContent("");
    },
  },
};
</script>

<style scoped lang="scss">
.filter-item {
  width: 100%;
}
</style>
