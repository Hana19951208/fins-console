<template>
  <div>
    <el-dialog
      :close-on-click-modal="false"
      :visible.sync="show"
      title="关联资源"
      width="800px"
      @closed="closed"
    >
      <i-search-el-table
        ref="userRoleTable"
        :query-form="queryForm"
        :columns="columns"
        :data="data"
        :show-page-title="false"
        :advanceQueryButton="false"
        :loading="loading"
        :page-sizes="[5, 15, 20]"
        @pagination="initDataTable"
      >
        <template slot="simple-form">
          <el-form-item @submit.native.prevent>
            <el-input
              v-model.trim="queryForm.name"
              size="small"
              placeholder="请输入资源名称"
              clearable
            >
              <el-button
                slot="append"
                @click="$refs.userRoleTable.handleFilter()"
                icon="el-icon-search"
              ></el-button>
            </el-input>
          </el-form-item>
        </template>
        <template slot="action-button">
          <el-button type="primary" @click="rowClickHandle">确认关联</el-button>
        </template>
      </i-search-el-table>
    </el-dialog>
  </div>
</template>
<script>
import { getDictEntrysByCode } from "@/utils";
import ISearchElTable from "@/components/ISearchElTable/index";
import Treeselect from "@riophae/vue-treeselect";
import "@riophae/vue-treeselect/dist/vue-treeselect.css";
export default {
  name: "GrantResource",
  components: {
    ISearchElTable,
    Treeselect,
  },
  props: {
    value: {
      default: false,
      type: Boolean,
    },
    popData: {
      default: () => {},
      type: Object,
    },
  },
  data() {
    return {
      show: false,
      columns: [
        { label: "资源名称", key: "name", align: "center", "min-width": 120 },
        { label: "资源路径", key: "action", align: "center", "min-width": 200 },
        { label: "描述", key: "descn", align: "center", "min-width": 120 },
      ],
      queryForm: {
        pageNum: 1,
        pageSize: 5,
        name: null,
        action: null,
        channel: null,
        productCode: null,
      },
      data: {},
      loading: false,
      defaultProps: {
        children: "children",
        label: "name",
      },
      normalizer(node) {
        return {
          id: node.id,
          label: node.name,
          children: node.childrens,
        };
      },
      areaCodeDs: [],
    };
  },
  computed: {
    menuTreeDs() {
      return getDictEntrysByCode("CHANNEL");
    },
    productTypeDs() {
      return getDictEntrysByCode("PRODUCT_TYPE");
    },
    channelDs() {
      return getDictEntrysByCode("CHANNEL");
    },
    typeDs() {
      return [
        { name: "未授权", code: 1 },
        { name: "已授权", code: 2 },
        { name: "未知", code: null },
      ];
    },
  },
  watch: {
    value(value) {
      this.show = value;
      if (this.popData) {
        this.$nextTick(() => {
          this.queryForm = this.$options.data().queryForm;
          this.initDataTable();
        });
      }
    },
  },
  created() {
    this.getOrganizationTree();
  },
  methods: {
    initDataTable() {
      this.loading = true;
      this.queryForm.channel = this.popData.channel;
      this.$api.resource.getAllResource(this.queryForm).then((res) => {
        this.loading = false;
        this.data = res;
      });
    },
    dialogShowChg() {
      this.$emit("show");
    },
    closed() {
      this.dialogShowChg();
    },
    getOrganizationTree() {
      this.$api.org.getOrganizationTree({ isCredit: true }).then((res) => {
        this.areaCodeDs = res;
      });
    },
    rowClickHandle() {
      if (this.$refs.userRoleTable.isCheckedOne()) {
        const row = this.$refs.userRoleTable.selection[0];
        this.$emit("resourceSelectHandle", row.name, row.id);
        this.dialogShowChg();
      }
    },
  },
};
</script>

<style scoped></style>
