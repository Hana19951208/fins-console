<template>
  <div class="password">
    <el-dialog
      :close-on-click-modal="false"
      :visible.sync="show"
      center
      width="40%"
      :show-close="changeFlag != 1"
      title="修改密码"
      @closed="dialogShowChg"
    >
      <el-form ref="addForm" :model="form" :rules="rules" label-width="120px">
        <el-form-item label="旧密码：" prop="oldPassword" label-width="120px">
          <el-input
            v-model.trim="form.oldPassword"
            maxlength="30"
            placeholder="请输入旧密码"
            show-password
          />
        </el-form-item>
        <el-form-item label="新密码：" prop="password" label-width="120px">
          <el-input
            v-model.trim="form.password"
            maxlength="30"
            placeholder="请输入新密码,长度8-12位,必须包含数字和大小写字母"
            show-password
          />
        </el-form-item>
        <el-form-item
          label="确认密码："
          prop="confirmPassword"
          label-width="120px"
        >
          <el-input
            v-model.trim="form.confirmPassword"
            maxlength="30"
            placeholder="请输入新密码,长度8-12位,必须包含数字和大小写字母"
            show-password
          />
        </el-form-item>
      </el-form>
      <div class="text-center pt-2">
        <el-button type="primary" @click="submit('addForm')"
          ><span class="mx-2">提交</span></el-button
        >
      </div>
    </el-dialog>
  </div>
</template>

<script>
import { mappingData, encrypt } from "@/utils";
import { mapGetters } from "vuex";
export default {
  name: "ChangePassWord",
  props: {
    value: {
      default: false,
      type: Boolean,
    },
    selection: {
      default: () => {},
      type: Object,
    },
  },
  data() {
    var validPassword = (rule, value, callback) => {
      //数字
      let REG_NUMBER = ".*\\d+.*";
      //小写字母
      let REG_UPPERCASE = ".*[A-Z]+.*";
      //大写字母
      let REG_LOWERCASE = ".*[a-z]+.*";
      //特殊符号(~!@#$%^&*()_+|<>,.?/:;'[]{}\)
      let REG_SYMBOL = ".*[~!#$%^&*()_+|<>,.?/:;'\\[\\]{}\"]+.*";
      let i = 0;
      if (value == null || value.length < 8 || value.length > 12) {
        return callback(
          new Error("请输入长度8-12位,必须包含数字和大小写字母的密码")
        );
      }
      if (value.match(REG_NUMBER)) i++;
      if (value.match(REG_LOWERCASE)) i++;
      if (value.match(REG_UPPERCASE)) i++;
      if (!value.match(REG_SYMBOL)) i++;
      if (i < 4) {
        return callback(
          new Error("请输入长度8-12位,必须包含数字和大小写字母的密码")
        );
      } else {
        return callback();
      }
    };
    return {
      show: false,
      form: {
        oldPassword: null,
        password: null,
        confirmPassword: null,
      },
      rules: {
        oldPassword: [
          { required: true, message: "请输入旧密码", trigger: "blur" },
        ],
        password: [
          {
            required: true,
            message: "请输入新密码,长度8-12位,必须包含数字和大小写字母",
            trigger: "blur",
          },
          { validator: validPassword, trigger: "blur" },
        ],
        confirmPassword: [
          {
            required: true,
            message: "请输入新密码,长度8-12位,必须包含数字和大小写字母",
            trigger: "blur",
          },
          { validator: validPassword, trigger: "blur" },
        ],
      },
    };
  },
  computed: {
    ...mapGetters(["user"]),
    userEntity() {
      return typeof this.user === "string" ? JSON.parse(this.user) : this.user;
    },
    changeFlag() {
      return this.userEntity.changeFlag;
    },
  },
  watch: {
    value(value) {
      this.show = value;
      if (this.selection.id && this.show) {
        this.$nextTick(() => {
          this.initEdit(this.selection);
        });
      }
    },
  },
  methods: {
    dialogShowChg() {
      this.$emit("show");
    },
    initEdit(data) {
      Object.assign(this.form, mappingData(data, this.form));
    },
    submit(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          if (!this.form.oldPassword) {
            this.$message({
              message: "请输入旧密码",
              type: "warning",
            });
            return false;
          }
          const data = {
            oldPassword: encrypt(this.form.oldPassword),
          };
          if (!this.form.password) {
            this.$message({
              message: "请输入新密码",
              type: "warning",
            });
            return false;
          }
          if (this.form.password === this.form.oldPassword) {
            this.$message({
              message: "不能和旧密码相同",
              type: "warning",
            });
            return false;
          }
          if (this.form.password !== this.form.confirmPassword) {
            this.$message({
              message: "您两次输入的新密码不一致，请重新输入",
              type: "warning",
            });
            return false;
          }
          data.newPassword = encrypt(this.form.password);
          this.$api.login.updateUserPwd(data).then((res) => {
            this.$message({
              message: "修改密码成功,请重新登录！",
              type: "success",
            });
            this.show = false;
            setTimeout(() => {
              this.$store.dispatch("LogOut").then(() => {
                location.reload();
              });
            }, 1500);
          });
        }
      });
    },
  },
};
</script>

<style  lang="scss">
.el-input.is-disabled .el-input__inner {
  color: #333 !important;
}
.password .el-input__inner {
  border: 1px solid #ddd !important;
}
</style>
