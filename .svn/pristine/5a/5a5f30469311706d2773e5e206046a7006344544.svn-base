<template>
  <div class="resource-page">
    <i-search-el-table
      ref="table"
      :query-form="queryForm"
      :columns="columns"
      :data="data"
      :loading="loading"
      :index="true"
      :has-check-box="true"
      advance-query
      @pagination="initDataTable"
    >
      <template slot="type" slot-scope="{ scope }">
        {{ scope.row.type | dictFormat(typeDs) }}
      </template>
      <template slot="simple-form">
        <el-form-item @submit.native.prevent>
          <el-input
            v-model.trim="queryForm.name"
            :maxlength="50"
            size="small"
            placeholder="请输入资源名称"
            clearable
          >
            <el-button
              slot="append"
              icon="el-icon-search"
              @click="$refs.table.handleFilter()"
            />
          </el-input>
        </el-form-item>
      </template>
      <template slot="search-form">
        <el-form-item label="资源类型：" prop="type">
          <el-select
            v-model="queryForm.type"
            placeholder="请选择资源类型"
            clearable
          >
            <el-option
              v-for="item in typeDs"
              :key="item.code"
              :label="item.name"
              :value="item.code"
            />
          </el-select>
        </el-form-item>
        <el-form-item label="资源渠道：" prop="channel">
          <el-select
            v-model="queryForm.channel"
            placeholder="请选择资源渠道"
            clearable
          >
            <el-option
              v-for="item in menuTreeDs"
              :key="item.code"
              :label="item.name"
              :value="item.code"
            />
          </el-select>
        </el-form-item>
      </template>
      <template slot="type" slot-scope="{ scope }">
        {{ scope.row.type | dictFormats(typeDs) }}
      </template>
      <template slot="channel" slot-scope="{ scope }">
        {{ scope.row.channel | dictFormats(menuTreeDs) }}
      </template>
      <template slot="action-button">
        <el-button-group>
          <el-button v-has="'btn-add'" @click="addHandle">
            <span>新增</span>
          </el-button>
        </el-button-group>
        <el-button-group>
          <el-button v-has="'btn-add'" @click="delHandle">
            <span>删除</span>
          </el-button>
        </el-button-group>
      </template>
      <template slot="opration" slot-scope="{ scope }">
        <el-link
          v-has="'btn-edit'"
          type="primary"
          class="blue--text text--darken-2"
          :underline="false"
          @click="editHandle(scope.row)"
        >
          编辑
        </el-link>
        <el-link
          v-has="'btn-del'"
          type="primary"
          class="ml-3 blue--text text--darken-2"
          :underline="false"
          @click="delHandle(scope.row)"
        >
          删除
        </el-link>
        <el-link
          v-has="'btn-relation-btn'"
          v-if="scope.row.type == 'menu'"
          type="primary"
          class="ml-3 blue--text text--darken-2 body-2"
          :underline="false"
          @click="relatedResource(scope.row)"
        >
          关联按钮
        </el-link>
      </template>
    </i-search-el-table>
    <add
      ref="addDialog"
      :id="selectionId"
      v-model="addDialog.show"
      :selection="selection"
      @show="addDialog.show = false"
      @refreshTable="initDataTable"
    />
    <related
      ref="relatedDialog"
      :data="relatedData"
      :selection="selection"
      v-model="relatedDialog.show"
      @show="relatedDialog.show = false"
    />
  </div>
</template>

<script>
import ISearchElTable from "@/components/ISearchElTable";
import { getDictEntrysByCode, GLOBAL } from "@/utils";
import add from "./add";
import related from "./related";
import { mapGetters } from "vuex";
export default {
  name: "Menu",
  components: { add, related, ISearchElTable },
  data() {
    return {
      columns: [
        { label: "操作", key: "opration", align: "center", "min-width": 200 },
        { label: "资源名称", key: "name", align: "center", "min-width": 150 },
        { label: "资源路径", key: "action", align: "left", "min-width": 300 },
        { label: "资源类型", key: "type", align: "center", "min-width": 100 },
        {
          label: "资源渠道",
          key: "channel",
          align: "center",
          "min-width": 100,
        },
        { label: "描述", key: "descn", align: "center", "min-width": 100 },
      ],
      queryForm: {
        pageNum: 1,
        pageSize: 10,
        name: null,
        type: null,
        channel: null,
      },
      data: {},
      relatedData: [],
      loading: false,
      selectionId: null,
      addDialog: {
        show: false,
      },
      relatedDialog: {
        show: false,
      },
      selection: {},
      form: {
        resourceId: null,
        roleId: null,
      },
      curNodeKey: null,
    };
  },
  computed: {
    // 资源类型
    typeDs() {
      return getDictEntrysByCode("CORE.RESOURCE.TYPE");
    },
    // 产品
    productTypeDs() {
      return getDictEntrysByCode("PRODUCT_TYPE");
    },
    // 渠道选择
    menuTreeDs() {
      return getDictEntrysByCode("CHANNEL");
    },
    ...mapGetters(["user"]),
  },
  mounted() {
    this.initDataTable();
  },
  methods: {
    // 获取资源列表
    initDataTable() {
      this.loading = true;
      this.$api.resource.getAllResource(this.queryForm).then((res) => {
        this.data = res;
        this.loading = false;
      });
    },
    // 新增
    addHandle() {
      this.selection = {
        id: null,
      };
      this.addDialog.show = true;
    },
    // 编辑
    editHandle(row) {
      if (row) {
        this.selection = row;
        this.addDialog.show = true;
      } else {
        if (this.$refs.table.isCheckedOne()) {
          this.selection = this.$refs.table.selection[0];
          this.addDialog.show = true;
        }
      }
    },
    // 删除
    delHandle(row) {
      const ids = [];
      if (row && row.id) {
        ids.push(row.id);
        this.$refs.table
          .delConfirm({ message: "确定要删除选择的内容吗?" })
          .then(() => {
            this.$api.resource
              .deleteResource({ ids: ids.join(",") })
              .then(() => {
                this.$message({
                  message: GLOBAL.OPERATE_SUCCESS,
                  type: "success",
                });
                this.initDataTable();
              });
          });
      } else {
        if (this.$refs.table.isChecked()) {
          const selections = this.$refs.table.selection;
          selections.forEach((item) => {
            ids.push(item.id);
          });
          console.log(selections);
          this.$refs.table
            .delConfirm({ message: "确定要删除选择的内容吗?" })
            .then(() => {
              this.$api.resource
                .deleteResource({ ids: ids.join(",") })
                .then(() => {
                  this.$message({
                    message: GLOBAL.OPERATE_SUCCESS,
                    type: "success",
                  });
                  this.initDataTable();
                });
            });
        }
      }
    },
    // 关联按钮
    relatedResource(row) {
      this.selection = {
        id: row.id,
        productCode: row.productCode,
      };
      this.form.roleId =
        typeof this.user === "string"
          ? JSON.parse(this.user).roleId
          : this.user.roleId;
      this.form.resourceId = row.id;
      this.relatedData = [];
      this.$api.resource.selectResourceButtons(this.form).then((res) => {
        this.relatedData = res;
        this.relatedDialog.show = true;
      });
    },
  },
};
</script>
<style lang="scss" scoped>
.resource-page {
  position: relative;
  height: 100%;
  .layui-side {
    width: 200px;
    /deep/ .el-tree-node {
      margin: 12px 6px;
      border: 1px solid #eee;
    }
    /deep/ .el-tree-node.is-current {
      border-left-color: purple;
    }
  }
  .layui-body {
    left: 220px;
  }
}
</style>
